syntax = "proto3";

option csharp_namespace = "ExternalDeviceWin";

package greet;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply);
}

service PrinterInfo{
	// To check if the usb-ip is connected or the printer is driven.
	rpc GetAvailablePrinter(PrinterInfoRequest) returns (PrinterInfoResponse);
	// need to install driver, cannot be used now!!
	rpc GetPrintQueueInfo(PrintQueueReq) returns (PrintQueueRep);
	rpc FileHandler(stream FileReq) returns (FileResp);
}

service NetworkConnecter {
	//default type is 6 :Ethernet
	rpc GetWinAdd(AddressReq) returns (AddressResp);
	// init the usbip connect
	rpc InitUsbIp(UsbipDevice) returns (UsbipCallResp);
}


// Self-defined message
message Error {
	int32 code = 1;
	string message = 2;
}

message Success {
	int32 code = 1;
	string message = 2;
}

message printQueueInfo {
	string Name = 1;
	string FullName = 2;
	bool IsAvailable = 3;
	bool IsBusy = 4;
	bool IsInError = 5;
	bool IsOffLine = 6;
	bool isOutOfPaper = 7;
	bool isPaperJammed = 8;
	bool IsPaused = 9;
	string ErrMsg = 10;
}

message printQueueInfoList {
	repeated printQueueInfo PrintQueueList = 1;
}


// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings.
message HelloReply {
  string message = 1;
}


message PrinterInfoRequest{
	string originLinuxName = 1;
}

//The Reponse will 
message PrinterInfoResponse {
	string winName = 1;
	repeated string availablePrinter = 2;
}

message PrintQueueReq {
	string originLinuxName = 1;
	// is an optional param
	string printQueueName = 2;
}

message PrintQueueRep {
	oneof result{
		printQueueInfoList PrintQueueInfoList = 1;
		printQueueInfo PrintQueueInfo = 2;
	}
}

message FileReq{
	string originLinuxName = 1;
	string printerName = 2;
	bytes files = 3;
	string pages = 4;
}

message FileResp{
	oneof result{
		Error error = 1;
		Success Success = 2;
	}
}

message AddressReq {
	string originLinuxName = 1;
	string deviceId = 2;
	int32 networkType = 3;
}

message AddressResp {
	string ipv4Add = 1;
	oneof result{
		Error error = 2;
		Success Success = 3;
	}
}

message UsbipDevice {
	string originLinuxName = 1;
	string originIpAddress = 2;
	string busID = 3;
	bool isLocal = 4;
}

message UsbipCallResp {
	oneof result{
		Error error = 1;
		Success success = 2;
	}
}

message UsbipCheckReq {
	UsbipDevice usbipDevice  = 1;
	string connectedDevicePort = 2;
}